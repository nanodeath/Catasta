#!/usr/bin/env ruby

require 'optparse'

$: << "lib"

require 'term/ansicolor'
class String
  include Term::ANSIColor
end

require "catasta/core/app"

options = {
  header: true,
  format: "raw"
}
input_file = nil
output_directory = nil
op = OptionParser.new do |opts|
  opts.banner = "Usage: ruby #{File.basename $0} [options] [INPUT] [OUTPUT]"
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on("-t", "--targets x,y,z", Array, "Type to output, e.g. Java15, Ruby.") do |t|
    options[:targets] = t
  end
  opts.on("--[no-]header", "Enable or disable the header at the top of generated files.") do |h|
    options[:header] = h
  end
  opts.on("--format FORMAT", ["raw", "json"], "Format of content to output") do |f|
    options[:format] = f
  end
  # No argument, shows at tail.  This will print an options summary.
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end
op.parse!

input = ARGV.shift
output = ARGV.shift

# if !input_file || (options[:format] == "file" && !output_directory)
#   puts op.help
#   exit 1
# end

# if ["stdout", "-"].include?(options[:format])
#   if options[:targets].size != 1
#     puts "stdout format only works when outputting exactly one target"
#     exit 1
#   end
#   options[:format] = "stdout"
#   output_directory = $stdout
# end

# unless File.exist? input_file
#   $stderr.puts "File not found: `#{input_file}`"
#   exit
# end

Catasta::App.new(options).go(input: input, output: output)